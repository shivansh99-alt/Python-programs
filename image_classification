import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
dataset = pd.read_csv('MNIST.csv')

# Display the first 5 sample images
for i in range(5):
    plt.subplot(1, 5, i+1)
    plt.imshow(dataset.iloc[i, 1:].values.reshape(28, 28), cmap='gray')
    plt.title(dataset.iloc[i, 0])
    plt.axis('off')

plt.show()

# Split the dataset into training and testing sets
X = dataset.iloc[:, 1:].values
y = dataset.iloc[:, 0].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Reshape the features for better visualization and processing
X_train = X_train.reshape(-1, 28, 28)
X_test = X_test.reshape(-1, 28, 28)

# Create and train the Random Forest Classifier
classifier = RandomForestClassifier(n_estimators=100, random_state=42)
classifier.fit(X_train, y_train)

# Make predictions on the test set and evaluate the classifier's performance
y_pred = classifier.predict(X_test)

print('Classification Report:')
print(classification_report(y_test, y_pred))

print('Confusion Matrix:')
print(confusion_matrix(y_test, y_pred))

print('Accuracy Score:')
print(accuracy_score(y_test, y_pred))

# Visualize the performance of the Random Forest Classifier
plt.figure(figsize=(12, 8))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, cmap='YlGnBu')
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()